services:
  db:
    container_name: facility_feed_service_db
    image: postgres:15-alpine
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 5
    environment:
      POSTGRES_DB: ${POSTGRES_DB}
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
    volumes:
      - ./postgre/data:/var/lib/postgresql/data
    ports:
      - "${POSTGRES_PORT}:5432"
    restart: always
    networks:
      - app_network

  redis:
    container_name: facility_feed_service_redis
    image: redis:7-alpine
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    ports:
      - "${REDIS_PORT}:6379"
    volumes:
      - redis_data:/data
    restart: always
    networks:
      - app_network

  facility_feed_service:
    container_name: facility_feed_service
    build: .
    volumes:
      - .:/app
    env_file:
      - .env  
    ports:
      - "${DJANGO_PORT}:8000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - DJANGO_SETTINGS_MODULE=facility_feed_service.settings
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND}
      - DATABASE_URL=${DATABASE_URL}
    restart: always
    networks:
      - app_network

  celery:
    container_name: facility_feed_service_celery
    build: .
    command: sh -c "echo 'Celery command placeholder'"
    volumes:
      - .:/app
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - DJANGO_SETTINGS_MODULE=${DJANGO_SETTINGS_MODULE}
      - DATABASE_URL=${DATABASE_URL}
      - CELERY_BROKER_URL=${CELERY_BROKER_URL}
      - CELERY_RESULT_BACKEND=${CELERY_RESULT_BACKEND}
      - RUN_CELERY=true
    restart: always
    networks:
      - app_network

volumes:
  pgadmin_data:
  redis_data:

networks:
  app_network: