name: CI/CD Pipeline for Facility Feed Service

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  lint_and_test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_DB: mydatabase
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
        ports:
          - 5432:5432
        # Ensure the database is ready before running tests
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python environment
        uses: actions/setup-python@v2
        with:
          python-version: "3.8"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run linting with flake8
        run: |
          pip install flake8
          flake8 .

      - name: Set environment variables
        run: |
          echo "DJANGO_SETTINGS_MODULE=facility_feed_service.settings" >> $GITHUB_ENV
          echo "POSTGRES_DB=mydatabase" >> $GITHUB_ENV
          echo "POSTGRES_USER=postgres" >> $GITHUB_ENV
          echo "POSTGRES_PASSWORD=password" >> $GITHUB_ENV
          echo "DB_HOST=localhost" >> $GITHUB_ENV

      - name: Run tests with pytest
        run: |
          pip install pytest pytest-django psycopg2-binary
          pytest

  build_and_push:
      needs: lint_and_test  # Only runs if lint_and_test succeeds
      runs-on: ubuntu-latest
      if: github.ref == 'refs/heads/main'  # Only run on main branch push

      steps:
        - name: Checkout code
          uses: actions/checkout@v3

        - name: Configure AWS credentials
          uses: aws-actions/configure-aws-credentials@v2
          with:
            aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
            aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
            aws-region: ${{ secrets.AWS_REGION }}

        - name: Login to Amazon ECR
          id: login-ecr
          uses: aws-actions/amazon-ecr-login@v1

        - name: Build, tag, and push image to Amazon ECR
          env:
            ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
            ECR_REPOSITORY: facility-feed-service
            IMAGE_TAG: ${{ github.sha }}
          run: |
            # Build the Docker image
            docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
            
            # Tag with latest
            docker tag $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:latest
            
            # Push both tags to ECR
            docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
            docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest          