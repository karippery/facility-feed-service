name: CI/CD Pipeline for Facility Feed Service

on:
  push:
    branches:
      - '*'
    paths-ignore:
      - '*.md'  # Skip if only docs change
  pull_request:
    branches:
      - '*'
  workflow_dispatch:  # Manual trigger option

jobs:
  lint_and_test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:latest
        env:
          POSTGRES_DB: mydatabase
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: password
        ports:
          - 5432:5432
        options: >-
          --health-cmd "pg_isready -U postgres"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python environment
        uses: actions/setup-python@v4
        with:
          python-version: "3.8"

      - name: Cache Python dependencies
        uses: actions/cache@v3
        with:
          path: ~/.pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run linting with flake8
        run: |
          pip install flake8
          flake8 . --max-line-length=100 --exclude=venv,migrations

      - name: Set environment variables
        run: |
          echo "DJANGO_SETTINGS_MODULE=facility_feed_service.settings" >> $GITHUB_ENV
          echo "POSTGRES_DB=mydatabase" >> $GITHUB_ENV
          echo "POSTGRES_USER=postgres" >> $GITHUB_ENV
          echo "POSTGRES_PASSWORD=password" >> $GITHUB_ENV
          echo "DB_HOST=localhost" >> $GITHUB_ENV
          echo "DATABASE_URL=postgres://postgres:password@localhost:5432/mydatabase" >> $GITHUB_ENV

      - name: Run tests with pytest
        run: |
          pip install pytest pytest-django psycopg2-binary pytest-cov
          pytest --verbose --cov=./ --cov-report=xml

      - name: Upload coverage report
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage.xml
        if: success()

  build_docker_image:
    needs: lint_and_test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: ${{ runner.os }}-buildx-

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build Docker image
        run: |
          docker build -t facility-feed-service:${{ github.sha }} .
          docker tag facility-feed-service:${{ github.sha }} facility-feed-service:latest

      # Uncomment and configure these when you have AWS access
      # - name: Configure AWS credentials
      #   uses: aws-actions/configure-aws-credentials@v2
      #   with:
      #     aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
      #     aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      #     aws-region: ${{ secrets.AWS_REGION }}
      #
      # - name: Login to Amazon ECR
      #   id: login-ecr
      #   uses: aws-actions/amazon-ecr-login@v2
      #
      # - name: Push to Amazon ECR
      #   run: |
      #     docker tag facility-feed-service:${{ github.sha }} ${{ steps.login-ecr.outputs.registry }}/facility-feed-service:${{ github.sha }}
      #     docker push ${{ steps.login-ecr.outputs.registry }}/facility-feed-service:${{ github.sha }}
      #     docker tag facility-feed-service:${{ github.sha }} ${{ steps.login-ecr.outputs.registry }}/facility-feed-service:latest
      #     docker push ${{ steps.login-ecr.outputs.registry }}/facility-feed-service:latest